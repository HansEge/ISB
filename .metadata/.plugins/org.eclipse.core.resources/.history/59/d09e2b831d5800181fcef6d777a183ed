/*
b * AlgoTester.cpp
=======
 * AlgoTester.cpp
>>>>>>> 6fa30427fae59f1a367d7ab5f935000e6fcce47e
 *
 *  Created on: 28. feb. 2018
 *      Author: Kim Bjerge
 */

#include <stdio.h>
#include "AlgoTester.h"
#include "LMSFilter.h"

// Fixed signal size must be manually changed
#define N 1024  // Test signal length

// Test signal used for testing made as global variables for plotting
//section("L1_data_a")
short NoiseSignal[N];	// Test noise signal loaded from .txt file
//section("L1_data_a")
short DesiredSignal[N];// Test desired signal loaded from .txt file
//section("L1_data_a")
short OutputSignal[N]; // Result after processing test signal with m_pAlgo

int y_buffer[N];

AlgoTester::AlgoTester(Algorithm *pAlgo)
{
	m_pAlgo = pAlgo;
}

short AlgoTester::readSignal(short buffer[], char *name)
{
	short error = -1;
	FILE *fp;
	short tmp;

	fp=fopen(name , "r");
	if (fp)
	{
		for(short n=0; n < N; n++) {
			fscanf(fp, "%hd,\n", &tmp);
			buffer[n] = tmp;
		}
		fclose(fp);
		error = 0;
	}
	return error;
}

short AlgoTester::writeSignal(short filteredOutputBuffer[], char *FilteredOutput)
{
	short error = -1;
	FILE *fp;

	fp=fopen(FilteredOutput, "w");
	if (fp)
	{
		for(short n=0; n < N; n++)
			fprintf(fp, "%hd,\n", filteredOutputBuffer[n]);
		fclose(fp);
		error = 0;
	}
	return error;
}


short AlgoTester::runTest(char *noiseName, char *desiredName, char *outError, char *outYError)
{
	// Reading test signal in inFileName
	short error = readSignal(NoiseSignal, noiseName);
	if (error == 0)
	{
		// Test file loaded into TestSignal
		printf("Testing algorithm - input file %s with signal of %d samples\n", noiseName, N);

		// Processing algorithm on TestSignal
		m_pAlgo->process(NoiseSignal, DesiredSignal, OutputSignal, N);

		// Writing result from OutputSignal to outFileName
		error = writeSignal(OutputSignal,outError);

		if (error == 0)
			printf("Result signal of %d samples saved in %s \n", N, noiseName);
		else
			printf("Error writing result to file %s \n", noiseName);
	}
	else
		printf("Error reading file %s with input test signal\n", noiseName);

	error = readSignal(DesiredSignal, desiredName);
	if (error == 0)
		{
			// Test file loaded into TestSignal
			printf("Testing algorithm - input file %s with signal of %d samples\n", desiredName, N);

			// Processing algorithm on TestSignal
			m_pAlgo->process(NoiseSignal, DesiredSignal, OutputSignal, N);

			// Writing result from OutputSignal to outFileName
			error = writeSignal(OutputSignal,outError);

			if (error == 0)
				printf("Result signal of %d samples saved in %s \n", N, desiredName);
			else
				printf("Error writing result to file %s \n", desiredName);
		}
		else
			printf("Error reading file %s with input test signal\n", desiredName);


	return error;
}
